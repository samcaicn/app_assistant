import { types } from "wechaty";
import { z } from "zod";

import { SEPARATOR_LINE } from "@cs-magic/common/dist/const.js";
import logger from "@cs-magic/common/dist/log/index.js";
import { ILlmMessage } from "@cs-magic/common/dist/schema/message.js";
import { safeCallLLM } from "@cs-magic/llm/dist/utils/safe-call-llm.js";
import { trimMessages } from "@cs-magic/llm/dist/utils/trim-messages.js";

import { FeatureMap, FeatureType } from "../../../../schema/index.js";
import { listMessagesOfLatestTopic } from "../../../utils/index.js";

import { BasePlugin } from "./base.plugin.js";

const commandTypeSchema = z.enum([
  "enable",
  "disable",
  // "new", "list"
]);
type CommandType = z.infer<typeof commandTypeSchema>;
const i18n: FeatureMap<CommandType> = {
  en: {
    title: "Super Chatter",
    description:
      "Hello, I am the Super Chatter!" +
      "\nThe Only One AI Bot You Need in the WeChat ecosystem." +
      "\nWhat I can help you today? üç∫",
    commands: {
      enable: {
        type: "enable",
        description: "enable AI chat",
      },
      disable: {
        type: "disable",
        description: "disable AI chat",
      },
      // new: {
      //   type: "new",
      //   description: "create a new topic",
      // },
      // list: {
      //   type: "list",
      //   description: "list all the topics",
      // },
    },
  },
};

export class ChatterPlugin extends BasePlugin {
  static override name: FeatureType = "chatter";
  public override i18n = i18n;

  override async help() {
    const commands = await this.getCommands();
    const desc = await this.getDescription();
    const preference = await this.getConvPreference();
    await this.standardReply(
      [
        desc,
        SEPARATOR_LINE,
        "Status:",
        `  - enabled: ${preference.features.chatter.enabled}`,
        `  - model: ${preference.features.chatter.model}`,
      ].join("\n"),
      Object.keys(commands).map(
        (command) => `  ${ChatterPlugin.name} ${command}`,
      ),
    );
  }

  async safeReplyWithAI() {
    const m = this.message;
    // todo: @all ÁöÑÊó∂ÂÄôÊúâbug
    // const mentionList = await m.mentionList()
    // const mentionIds = mentionList.map((m) => m.id)
    // logger.debug("mention ids: %o", mentionIds)

    if (
      // ËøáÊª§ÈùûÊñáÊú¨ todo: image/xxxx
      m.type() !== types.Message.Text ||
      // ËøáÊª§Ëá™Â∑±ÁöÑÊ∂àÊÅØ
      m.self() ||
      // ËøáÊª§ÂæÆ‰ø°ÂÆòÊñπ
      m.talker().id === "weixin" ||
      // ËøáÊª§Áæ§ËÅä‰∏≠Ê≤°ÊúâatËá™Â∑±ÁöÑÊ∂àÊÅØ ÔºàÁßÅ‰ø°Ë¶ÅÂõûÔºâ
      (m.room() &&
        // Ê≤°ÊúâË¢´ at
        (!(await m.mentionSelf()) ||
          // ignore all
          this.text.includes("@All")) &&
        // ‰πüÊ≤°ÊúâÈóÆÂè∑ÂºÄÂ§¥
        //   todo: ÂÖÅËÆ∏ÂºÄÂ§¥ÊúâÁ©∫Ê†ºÔºåË¶Å‰∏éÂêéÁª≠Êâæ‰ø°ÊÅØÊó∂ÂØπ‰∏äÔºàÈáçÊûÑ‰∏Ä‰∏ãÔºâ
        !/^\s*[?Ôºü]/.exec(this.text))
    )
      return;

    const convPreference = await this.getConvPreference();
    if (!convPreference.features.chatter.enabled) {
      const convData = await this.getConvData();
      // todo: user control
      if (!convData.plugin.chatter.turnOnReminded) {
        // await this.reply(
        //   [
        //     "ÁúãËµ∑Êù•ÊÇ®ÊòØÊÉ≥ÂíåÊàëËøõË°åAIËÅäÂ§©Ôºå‰ΩÜÊòØÂΩìÂâçËØ•Êèí‰ª∂ÂäüËÉΩÂπ∂Êú™ÂºÄÂêØÔºåËØ∑ÂÖàÊâìÂºÄÂêéÁªßÁª≠",
        //     SEPARATOR_LINE,
        //     "ËØ•Ê∂àÊÅØËøë‰ªÖÊèêÁ§∫‰∏ÄÊ¨°",
        //   ].join("\n"),
        // )
      }

      return logger.debug(`!convPreference.features.chatter.enabled`);
    }

    // todo: Â∏ÇÈù¢‰∏äÊúÄÁâõÈÄºÁöÑ AI Áæ§ËÅäÂõûÂ§çÈÄªËæë
    // È°∂Â±ÇÂõûÂ§çÈÄªËæëÔºöÂè™ÂõûÁ≠î ‰∏ä‰∏ÄÊ¨°botÂà∞Êú¨Ê¨°botÂáÜÂ§áÂõûÂ§ç‰πãÈó¥ÔºåÈúÄË¶ÅÂõûÁ≠îÁöÑN‰∏™ÈóÆÈ¢òÔºàÂêå‰∏Ä‰ºöËØùÈáåÔºå‰∏îÂ∑≤ÁªèÊúâLLMÂú®Ë∞ÉÁî®Ôºå‰∏îÁõÆÂâçÁöÑÊ∂àÊÅØ‰∏çÊòØÈòüÂàóÁöÑÊúÄÂ∞æÈÉ®ÔºåÂàôÊäõÂºÉËØ•LLMÔºâ
    // ‰∏≠Â±ÇÈÄâÊã©1. ÊØèÊù°ÈúÄË¶ÅÂõûÂ§çÁöÑÊ∂àÊÅØÔºå‰∏Ä‰∏ÄËøõË°åquoteÂõûÂ§ç
    // ‰∏≠Â±ÇÈÄâÊã©2. ÊâÄÊúâÂæÖÂõûÂ§çÁöÑÊ∂àÊÅØÔºåÁªü‰∏ÄÂú®‰∏ÄÊ¨°ÂõûÂ§çÈáåËß£ÂÜ≥ÔºåÁÑ∂Âêé‰∏çÂêåÁöÑÊ∂àÊÅØÂØπË±°Ôºå‰ΩøÁî® at ÁöÑÊäÄÊúØ
    // Â∫ïÂ±ÇÁöÑÈÄªËæëÔºàÊØè‰∏Ä‰∏™ÈóÆÈ¢òÊÄé‰πàÂõûÂ§çÔºâ:„ÄêÁõÆÁöÑÊòØÊÑèÂõæËØÜÂà´ÁöÑÂàÜÁ±ªÂáΩÊï∞„Äë
    // 1. ÂÖàÂà§Êñ≠Áî®Êà∑ÁöÑËøô‰∏™ÈóÆÈ¢òÊòØÂê¶ÊòØÊÅ∂ÊÑèÈóÆÈ¢ò„ÄêÈ£éÊéß„ÄëÈªëÂêçÂçïËøùËßÑËÆ∞ÂΩï+1ÔºåÁõ¥Âà∞3Áõ¥Êé•Â∞ÅÂè∑ÔºåÂπ∂ÁªôÂá∫ÂèãÂ•ΩÊèêÁ§∫
    // 2. ÊòØÂê¶ÈúÄË¶ÅËøõË°åÊñá‰ª∂Ëß£Êûê„Äêkimi„Äë„ÄÅÊñáÁ´†Ëß£Êûê„Äêkimi„Äë„ÄÅÂõæÁâáÁêÜËß£„Äêkimi/4v„ÄëÁ≠âÈ´òÊ∂àËÄóÁöÑÂ§ßËØ≠Ë®ÄÊ®°Âûã‰ªªÂä°
    // 3. ÁªÑÂêà‰∏ä‰∏ãÊñáÂéªÂõûÂ§ç „ÄêÈïøÁ™óÂè£ÊÄé‰πàÂéªhandle„Äë

    // ÊãøÂèñÊúÄÊñ∞ÁöÑ‰∏ä‰∏ãÊñáËÆ∞ÂΩï

    const filteredMessages = this.bot.context?.wxid
      ? await listMessagesOfLatestTopic(this.bot.context.wxid, this.convId)
      : [];

    const model = convPreference.features.chatter.model;
    const messages: ILlmMessage[] = filteredMessages
      .filter((m) => !!m.text)
      .map((m) => ({
        role:
          m.talkerId === this.bot.context?.wxid
            ? ("assistant" as const)
            : ("user" as const),
        // todo: merge chats
        content: `[${m.talker.name}]: ${m.text}`,
      }));

    trimMessages(messages, model);
    // logger.info(`--  context(len=${context.length})`)

    void this.notify([`üåà calling LLM (model=${model})`].join("\n"), "chatter");

    // ÈÄÅÁªô LLM
    // todo: ÈÄÅÁªô agent
    const res = await safeCallLLM({
      messages,
      model,
      user: await this.getUserIdentity(),
    });

    if (res.error) throw new Error(res.error);

    const content = res.response?.choices[0]?.message.content;
    if (!content)
      throw new Error(
        `invalid response content, please check Query(id=${res.query.id})`,
      );

    void this.reply(content);
    void this.notify(
      [`‚úÖ called LLM`, SEPARATOR_LINE, content].join("\n"),
      "chatter",
    );
  }
}
